// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	hasone "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/hasone"
	gorm "gorm.io/gorm"
	"time"
)

func CountryId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[hasone.Country, badorm.UUID] {
	return badorm.FieldCondition[hasone.Country, badorm.UUID]{
		Expressions: exprs,
		Field:       "ID",
	}
}
func CountryCreatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[hasone.Country, time.Time] {
	return badorm.FieldCondition[hasone.Country, time.Time]{
		Expressions: exprs,
		Field:       "CreatedAt",
	}
}
func CountryUpdatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[hasone.Country, time.Time] {
	return badorm.FieldCondition[hasone.Country, time.Time]{
		Expressions: exprs,
		Field:       "UpdatedAt",
	}
}
func CountryDeletedAt(exprs ...badorm.Expression[gorm.DeletedAt]) badorm.FieldCondition[hasone.Country, gorm.DeletedAt] {
	return badorm.FieldCondition[hasone.Country, gorm.DeletedAt]{
		Expressions: exprs,
		Field:       "DeletedAt",
	}
}
func CountryCapital(conditions ...badorm.Condition[hasone.City]) badorm.Condition[hasone.Country] {
	return badorm.JoinCondition[hasone.Country, hasone.City]{
		Conditions: conditions,
		T1Field:    "ID",
		T2Field:    "CountryID",
	}
}
func CityCountry(conditions ...badorm.Condition[hasone.Country]) badorm.Condition[hasone.City] {
	return badorm.JoinCondition[hasone.City, hasone.Country]{
		Conditions: conditions,
		T1Field:    "CountryID",
		T2Field:    "ID",
	}
}
