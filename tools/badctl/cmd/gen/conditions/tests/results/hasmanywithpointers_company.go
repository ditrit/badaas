// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	hasmanywithpointers "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/hasmanywithpointers"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var companyWithPointersType = reflect.TypeOf(*new(hasmanywithpointers.CompanyWithPointers))
var CompanyWithPointersIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "ID",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return badorm.FieldCondition[hasmanywithpointers.CompanyWithPointers, badorm.UUID]{
		FieldIdentifier: CompanyWithPointersIdField,
		Operator:        operator,
	}
}

var CompanyWithPointersCreatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersCreatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return badorm.FieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time]{
		FieldIdentifier: CompanyWithPointersCreatedAtField,
		Operator:        operator,
	}
}

var CompanyWithPointersUpdatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersUpdatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return badorm.FieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time]{
		FieldIdentifier: CompanyWithPointersUpdatedAtField,
		Operator:        operator,
	}
}

var CompanyWithPointersDeletedAtField = badorm.FieldIdentifier[gorm.DeletedAt]{
	Field:     "DeletedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersDeletedAt(operator badorm.Operator[gorm.DeletedAt]) badorm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return badorm.FieldCondition[hasmanywithpointers.CompanyWithPointers, gorm.DeletedAt]{
		FieldIdentifier: CompanyWithPointersDeletedAtField,
		Operator:        operator,
	}
}
func CompanyWithPointersPreloadSellers(nestedPreloads ...badorm.IJoinCondition[hasmanywithpointers.SellerInPointers]) badorm.Condition[hasmanywithpointers.CompanyWithPointers] {
	return badorm.NewCollectionPreloadCondition[hasmanywithpointers.CompanyWithPointers, hasmanywithpointers.SellerInPointers]("Sellers", nestedPreloads)
}

var CompanyWithPointersPreloadAttributes = badorm.NewPreloadCondition[hasmanywithpointers.CompanyWithPointers](CompanyWithPointersIdField, CompanyWithPointersCreatedAtField, CompanyWithPointersUpdatedAtField, CompanyWithPointersDeletedAtField)
var CompanyWithPointersPreloadRelations = []badorm.Condition[hasmanywithpointers.CompanyWithPointers]{CompanyWithPointersPreloadSellers()}
