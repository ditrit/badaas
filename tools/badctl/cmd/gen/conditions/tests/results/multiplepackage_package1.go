// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	package1 "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/multiplepackage/package1"
	package2 "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/multiplepackage/package2"
	gorm "gorm.io/gorm"
	"time"
)

func Package1Id(expr badorm.Expression[badorm.UUID]) badorm.WhereCondition[package1.Package1] {
	return badorm.FieldCondition[package1.Package1, badorm.UUID]{
		Expression:      expr,
		FieldIdentifier: badorm.IDFieldID,
	}
}
func Package1CreatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[package1.Package1] {
	return badorm.FieldCondition[package1.Package1, time.Time]{
		Expression:      expr,
		FieldIdentifier: badorm.CreatedAtFieldID,
	}
}
func Package1UpdatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[package1.Package1] {
	return badorm.FieldCondition[package1.Package1, time.Time]{
		Expression:      expr,
		FieldIdentifier: badorm.UpdatedAtFieldID,
	}
}
func Package1DeletedAt(expr badorm.Expression[gorm.DeletedAt]) badorm.WhereCondition[package1.Package1] {
	return badorm.FieldCondition[package1.Package1, gorm.DeletedAt]{
		Expression:      expr,
		FieldIdentifier: badorm.DeletedAtFieldID,
	}
}
func Package1Package2(conditions ...badorm.Condition[package2.Package2]) badorm.Condition[package1.Package1] {
	return badorm.JoinCondition[package1.Package1, package2.Package2]{
		Conditions:    conditions,
		RelationField: "Package2",
		T1Field:       "ID",
		T2Field:       "Package1ID",
	}
}
func Package2Package1(conditions ...badorm.Condition[package1.Package1]) badorm.Condition[package2.Package2] {
	return badorm.JoinCondition[package2.Package2, package1.Package1]{
		Conditions:    conditions,
		RelationField: "Package1",
		T1Field:       "Package1ID",
		T2Field:       "ID",
	}
}

var Package1Preload = badorm.NewPreloadCondition[package1.Package1]()
