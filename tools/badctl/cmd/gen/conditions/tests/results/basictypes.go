// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	basictypes "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/basictypes"
	gorm "gorm.io/gorm"
	"time"
)

func BasicTypesId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[basictypes.BasicTypes, badorm.UUID] {
	return badorm.FieldCondition[basictypes.BasicTypes, badorm.UUID]{
		Expressions: exprs,
		Field:       "ID",
	}
}
func BasicTypesCreatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[basictypes.BasicTypes, time.Time] {
	return badorm.FieldCondition[basictypes.BasicTypes, time.Time]{
		Expressions: exprs,
		Field:       "CreatedAt",
	}
}
func BasicTypesUpdatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[basictypes.BasicTypes, time.Time] {
	return badorm.FieldCondition[basictypes.BasicTypes, time.Time]{
		Expressions: exprs,
		Field:       "UpdatedAt",
	}
}
func BasicTypesDeletedAt(exprs ...badorm.Expression[gorm.DeletedAt]) badorm.FieldCondition[basictypes.BasicTypes, gorm.DeletedAt] {
	return badorm.FieldCondition[basictypes.BasicTypes, gorm.DeletedAt]{
		Expressions: exprs,
		Field:       "DeletedAt",
	}
}
func BasicTypesBool(exprs ...badorm.Expression[bool]) badorm.FieldCondition[basictypes.BasicTypes, bool] {
	return badorm.FieldCondition[basictypes.BasicTypes, bool]{
		Expressions: exprs,
		Field:       "Bool",
	}
}
func BasicTypesInt(exprs ...badorm.Expression[int]) badorm.FieldCondition[basictypes.BasicTypes, int] {
	return badorm.FieldCondition[basictypes.BasicTypes, int]{
		Expressions: exprs,
		Field:       "Int",
	}
}
func BasicTypesInt8(exprs ...badorm.Expression[int8]) badorm.FieldCondition[basictypes.BasicTypes, int8] {
	return badorm.FieldCondition[basictypes.BasicTypes, int8]{
		Expressions: exprs,
		Field:       "Int8",
	}
}
func BasicTypesInt16(exprs ...badorm.Expression[int16]) badorm.FieldCondition[basictypes.BasicTypes, int16] {
	return badorm.FieldCondition[basictypes.BasicTypes, int16]{
		Expressions: exprs,
		Field:       "Int16",
	}
}
func BasicTypesInt32(exprs ...badorm.Expression[int32]) badorm.FieldCondition[basictypes.BasicTypes, int32] {
	return badorm.FieldCondition[basictypes.BasicTypes, int32]{
		Expressions: exprs,
		Field:       "Int32",
	}
}
func BasicTypesInt64(exprs ...badorm.Expression[int64]) badorm.FieldCondition[basictypes.BasicTypes, int64] {
	return badorm.FieldCondition[basictypes.BasicTypes, int64]{
		Expressions: exprs,
		Field:       "Int64",
	}
}
func BasicTypesUInt(exprs ...badorm.Expression[uint]) badorm.FieldCondition[basictypes.BasicTypes, uint] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint]{
		Expressions: exprs,
		Field:       "UInt",
	}
}
func BasicTypesUInt8(exprs ...badorm.Expression[uint8]) badorm.FieldCondition[basictypes.BasicTypes, uint8] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint8]{
		Expressions: exprs,
		Field:       "UInt8",
	}
}
func BasicTypesUInt16(exprs ...badorm.Expression[uint16]) badorm.FieldCondition[basictypes.BasicTypes, uint16] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint16]{
		Expressions: exprs,
		Field:       "UInt16",
	}
}
func BasicTypesUInt32(exprs ...badorm.Expression[uint32]) badorm.FieldCondition[basictypes.BasicTypes, uint32] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint32]{
		Expressions: exprs,
		Field:       "UInt32",
	}
}
func BasicTypesUInt64(exprs ...badorm.Expression[uint64]) badorm.FieldCondition[basictypes.BasicTypes, uint64] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint64]{
		Expressions: exprs,
		Field:       "UInt64",
	}
}
func BasicTypesUIntptr(exprs ...badorm.Expression[uintptr]) badorm.FieldCondition[basictypes.BasicTypes, uintptr] {
	return badorm.FieldCondition[basictypes.BasicTypes, uintptr]{
		Expressions: exprs,
		Field:       "UIntptr",
	}
}
func BasicTypesFloat32(exprs ...badorm.Expression[float32]) badorm.FieldCondition[basictypes.BasicTypes, float32] {
	return badorm.FieldCondition[basictypes.BasicTypes, float32]{
		Expressions: exprs,
		Field:       "Float32",
	}
}
func BasicTypesFloat64(exprs ...badorm.Expression[float64]) badorm.FieldCondition[basictypes.BasicTypes, float64] {
	return badorm.FieldCondition[basictypes.BasicTypes, float64]{
		Expressions: exprs,
		Field:       "Float64",
	}
}
func BasicTypesComplex64(exprs ...badorm.Expression[complex64]) badorm.FieldCondition[basictypes.BasicTypes, complex64] {
	return badorm.FieldCondition[basictypes.BasicTypes, complex64]{
		Expressions: exprs,
		Field:       "Complex64",
	}
}
func BasicTypesComplex128(exprs ...badorm.Expression[complex128]) badorm.FieldCondition[basictypes.BasicTypes, complex128] {
	return badorm.FieldCondition[basictypes.BasicTypes, complex128]{
		Expressions: exprs,
		Field:       "Complex128",
	}
}
func BasicTypesString(exprs ...badorm.Expression[string]) badorm.FieldCondition[basictypes.BasicTypes, string] {
	return badorm.FieldCondition[basictypes.BasicTypes, string]{
		Expressions: exprs,
		Field:       "String",
	}
}
func BasicTypesByte(exprs ...badorm.Expression[uint8]) badorm.FieldCondition[basictypes.BasicTypes, uint8] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint8]{
		Expressions: exprs,
		Field:       "Byte",
	}
}
