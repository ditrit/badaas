// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	basictypes "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/basictypes"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var basicTypesType = reflect.TypeOf(*new(basictypes.BasicTypes))
var BasicTypesIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "ID",
	ModelType: basicTypesType,
}

func BasicTypesId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, badorm.UUID]{
		FieldIdentifier: BasicTypesIdField,
		Operator:        operator,
	}
}

var BasicTypesCreatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: basicTypesType,
}

func BasicTypesCreatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, time.Time]{
		FieldIdentifier: BasicTypesCreatedAtField,
		Operator:        operator,
	}
}

var BasicTypesUpdatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: basicTypesType,
}

func BasicTypesUpdatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, time.Time]{
		FieldIdentifier: BasicTypesUpdatedAtField,
		Operator:        operator,
	}
}

var BasicTypesDeletedAtField = badorm.FieldIdentifier[gorm.DeletedAt]{
	Field:     "DeletedAt",
	ModelType: basicTypesType,
}

func BasicTypesDeletedAt(operator badorm.Operator[gorm.DeletedAt]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, gorm.DeletedAt]{
		FieldIdentifier: BasicTypesDeletedAtField,
		Operator:        operator,
	}
}

var BasicTypesBoolField = badorm.FieldIdentifier[bool]{
	Field:     "Bool",
	ModelType: basicTypesType,
}

func BasicTypesBool(operator badorm.Operator[bool]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, bool]{
		FieldIdentifier: BasicTypesBoolField,
		Operator:        operator,
	}
}

var BasicTypesIntField = badorm.FieldIdentifier[int]{
	Field:     "Int",
	ModelType: basicTypesType,
}

func BasicTypesInt(operator badorm.Operator[int]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, int]{
		FieldIdentifier: BasicTypesIntField,
		Operator:        operator,
	}
}

var BasicTypesInt8Field = badorm.FieldIdentifier[int8]{
	Field:     "Int8",
	ModelType: basicTypesType,
}

func BasicTypesInt8(operator badorm.Operator[int8]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, int8]{
		FieldIdentifier: BasicTypesInt8Field,
		Operator:        operator,
	}
}

var BasicTypesInt16Field = badorm.FieldIdentifier[int16]{
	Field:     "Int16",
	ModelType: basicTypesType,
}

func BasicTypesInt16(operator badorm.Operator[int16]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, int16]{
		FieldIdentifier: BasicTypesInt16Field,
		Operator:        operator,
	}
}

var BasicTypesInt32Field = badorm.FieldIdentifier[int32]{
	Field:     "Int32",
	ModelType: basicTypesType,
}

func BasicTypesInt32(operator badorm.Operator[int32]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, int32]{
		FieldIdentifier: BasicTypesInt32Field,
		Operator:        operator,
	}
}

var BasicTypesInt64Field = badorm.FieldIdentifier[int64]{
	Field:     "Int64",
	ModelType: basicTypesType,
}

func BasicTypesInt64(operator badorm.Operator[int64]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, int64]{
		FieldIdentifier: BasicTypesInt64Field,
		Operator:        operator,
	}
}

var BasicTypesUIntField = badorm.FieldIdentifier[uint]{
	Field:     "UInt",
	ModelType: basicTypesType,
}

func BasicTypesUInt(operator badorm.Operator[uint]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint]{
		FieldIdentifier: BasicTypesUIntField,
		Operator:        operator,
	}
}

var BasicTypesUInt8Field = badorm.FieldIdentifier[uint8]{
	Field:     "UInt8",
	ModelType: basicTypesType,
}

func BasicTypesUInt8(operator badorm.Operator[uint8]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint8]{
		FieldIdentifier: BasicTypesUInt8Field,
		Operator:        operator,
	}
}

var BasicTypesUInt16Field = badorm.FieldIdentifier[uint16]{
	Field:     "UInt16",
	ModelType: basicTypesType,
}

func BasicTypesUInt16(operator badorm.Operator[uint16]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint16]{
		FieldIdentifier: BasicTypesUInt16Field,
		Operator:        operator,
	}
}

var BasicTypesUInt32Field = badorm.FieldIdentifier[uint32]{
	Field:     "UInt32",
	ModelType: basicTypesType,
}

func BasicTypesUInt32(operator badorm.Operator[uint32]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint32]{
		FieldIdentifier: BasicTypesUInt32Field,
		Operator:        operator,
	}
}

var BasicTypesUInt64Field = badorm.FieldIdentifier[uint64]{
	Field:     "UInt64",
	ModelType: basicTypesType,
}

func BasicTypesUInt64(operator badorm.Operator[uint64]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint64]{
		FieldIdentifier: BasicTypesUInt64Field,
		Operator:        operator,
	}
}

var BasicTypesUIntptrField = badorm.FieldIdentifier[uintptr]{
	Field:     "UIntptr",
	ModelType: basicTypesType,
}

func BasicTypesUIntptr(operator badorm.Operator[uintptr]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uintptr]{
		FieldIdentifier: BasicTypesUIntptrField,
		Operator:        operator,
	}
}

var BasicTypesFloat32Field = badorm.FieldIdentifier[float32]{
	Field:     "Float32",
	ModelType: basicTypesType,
}

func BasicTypesFloat32(operator badorm.Operator[float32]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, float32]{
		FieldIdentifier: BasicTypesFloat32Field,
		Operator:        operator,
	}
}

var BasicTypesFloat64Field = badorm.FieldIdentifier[float64]{
	Field:     "Float64",
	ModelType: basicTypesType,
}

func BasicTypesFloat64(operator badorm.Operator[float64]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, float64]{
		FieldIdentifier: BasicTypesFloat64Field,
		Operator:        operator,
	}
}

var BasicTypesComplex64Field = badorm.FieldIdentifier[complex64]{
	Field:     "Complex64",
	ModelType: basicTypesType,
}

func BasicTypesComplex64(operator badorm.Operator[complex64]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, complex64]{
		FieldIdentifier: BasicTypesComplex64Field,
		Operator:        operator,
	}
}

var BasicTypesComplex128Field = badorm.FieldIdentifier[complex128]{
	Field:     "Complex128",
	ModelType: basicTypesType,
}

func BasicTypesComplex128(operator badorm.Operator[complex128]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, complex128]{
		FieldIdentifier: BasicTypesComplex128Field,
		Operator:        operator,
	}
}

var BasicTypesStringField = badorm.FieldIdentifier[string]{
	Field:     "String",
	ModelType: basicTypesType,
}

func BasicTypesString(operator badorm.Operator[string]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, string]{
		FieldIdentifier: BasicTypesStringField,
		Operator:        operator,
	}
}

var BasicTypesByteField = badorm.FieldIdentifier[uint8]{
	Field:     "Byte",
	ModelType: basicTypesType,
}

func BasicTypesByte(operator badorm.Operator[uint8]) badorm.WhereCondition[basictypes.BasicTypes] {
	return badorm.FieldCondition[basictypes.BasicTypes, uint8]{
		FieldIdentifier: BasicTypesByteField,
		Operator:        operator,
	}
}

var BasicTypesPreloadAttributes = badorm.NewPreloadCondition[basictypes.BasicTypes](BasicTypesIdField, BasicTypesCreatedAtField, BasicTypesUpdatedAtField, BasicTypesDeletedAtField, BasicTypesBoolField, BasicTypesIntField, BasicTypesInt8Field, BasicTypesInt16Field, BasicTypesInt32Field, BasicTypesInt64Field, BasicTypesUIntField, BasicTypesUInt8Field, BasicTypesUInt16Field, BasicTypesUInt32Field, BasicTypesUInt64Field, BasicTypesUIntptrField, BasicTypesFloat32Field, BasicTypesFloat64Field, BasicTypesComplex64Field, BasicTypesComplex128Field, BasicTypesStringField, BasicTypesByteField)
