// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	basicslices "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/basicslices"
	gorm "gorm.io/gorm"
	"time"
)

func BasicSlicesId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[basicslices.BasicSlices, badorm.UUID] {
	return badorm.FieldCondition[basicslices.BasicSlices, badorm.UUID]{
		Expressions: exprs,
		Field:       "ID",
	}
}
func BasicSlicesCreatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[basicslices.BasicSlices, time.Time] {
	return badorm.FieldCondition[basicslices.BasicSlices, time.Time]{
		Expressions: exprs,
		Field:       "CreatedAt",
	}
}
func BasicSlicesUpdatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[basicslices.BasicSlices, time.Time] {
	return badorm.FieldCondition[basicslices.BasicSlices, time.Time]{
		Expressions: exprs,
		Field:       "UpdatedAt",
	}
}
func BasicSlicesDeletedAt(exprs ...badorm.Expression[gorm.DeletedAt]) badorm.FieldCondition[basicslices.BasicSlices, gorm.DeletedAt] {
	return badorm.FieldCondition[basicslices.BasicSlices, gorm.DeletedAt]{
		Expressions: exprs,
		Field:       "DeletedAt",
	}
}
func BasicSlicesBool(exprs ...badorm.Expression[[]bool]) badorm.FieldCondition[basicslices.BasicSlices, []bool] {
	return badorm.FieldCondition[basicslices.BasicSlices, []bool]{
		Expressions: exprs,
		Field:       "Bool",
	}
}
func BasicSlicesInt(exprs ...badorm.Expression[[]int]) badorm.FieldCondition[basicslices.BasicSlices, []int] {
	return badorm.FieldCondition[basicslices.BasicSlices, []int]{
		Expressions: exprs,
		Field:       "Int",
	}
}
func BasicSlicesInt8(exprs ...badorm.Expression[[]int8]) badorm.FieldCondition[basicslices.BasicSlices, []int8] {
	return badorm.FieldCondition[basicslices.BasicSlices, []int8]{
		Expressions: exprs,
		Field:       "Int8",
	}
}
func BasicSlicesInt16(exprs ...badorm.Expression[[]int16]) badorm.FieldCondition[basicslices.BasicSlices, []int16] {
	return badorm.FieldCondition[basicslices.BasicSlices, []int16]{
		Expressions: exprs,
		Field:       "Int16",
	}
}
func BasicSlicesInt32(exprs ...badorm.Expression[[]int32]) badorm.FieldCondition[basicslices.BasicSlices, []int32] {
	return badorm.FieldCondition[basicslices.BasicSlices, []int32]{
		Expressions: exprs,
		Field:       "Int32",
	}
}
func BasicSlicesInt64(exprs ...badorm.Expression[[]int64]) badorm.FieldCondition[basicslices.BasicSlices, []int64] {
	return badorm.FieldCondition[basicslices.BasicSlices, []int64]{
		Expressions: exprs,
		Field:       "Int64",
	}
}
func BasicSlicesUInt(exprs ...badorm.Expression[[]uint]) badorm.FieldCondition[basicslices.BasicSlices, []uint] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uint]{
		Expressions: exprs,
		Field:       "UInt",
	}
}
func BasicSlicesUInt8(exprs ...badorm.Expression[[]uint8]) badorm.FieldCondition[basicslices.BasicSlices, []uint8] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uint8]{
		Expressions: exprs,
		Field:       "UInt8",
	}
}
func BasicSlicesUInt16(exprs ...badorm.Expression[[]uint16]) badorm.FieldCondition[basicslices.BasicSlices, []uint16] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uint16]{
		Expressions: exprs,
		Field:       "UInt16",
	}
}
func BasicSlicesUInt32(exprs ...badorm.Expression[[]uint32]) badorm.FieldCondition[basicslices.BasicSlices, []uint32] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uint32]{
		Expressions: exprs,
		Field:       "UInt32",
	}
}
func BasicSlicesUInt64(exprs ...badorm.Expression[[]uint64]) badorm.FieldCondition[basicslices.BasicSlices, []uint64] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uint64]{
		Expressions: exprs,
		Field:       "UInt64",
	}
}
func BasicSlicesUIntptr(exprs ...badorm.Expression[[]uintptr]) badorm.FieldCondition[basicslices.BasicSlices, []uintptr] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uintptr]{
		Expressions: exprs,
		Field:       "UIntptr",
	}
}
func BasicSlicesFloat32(exprs ...badorm.Expression[[]float32]) badorm.FieldCondition[basicslices.BasicSlices, []float32] {
	return badorm.FieldCondition[basicslices.BasicSlices, []float32]{
		Expressions: exprs,
		Field:       "Float32",
	}
}
func BasicSlicesFloat64(exprs ...badorm.Expression[[]float64]) badorm.FieldCondition[basicslices.BasicSlices, []float64] {
	return badorm.FieldCondition[basicslices.BasicSlices, []float64]{
		Expressions: exprs,
		Field:       "Float64",
	}
}
func BasicSlicesComplex64(exprs ...badorm.Expression[[]complex64]) badorm.FieldCondition[basicslices.BasicSlices, []complex64] {
	return badorm.FieldCondition[basicslices.BasicSlices, []complex64]{
		Expressions: exprs,
		Field:       "Complex64",
	}
}
func BasicSlicesComplex128(exprs ...badorm.Expression[[]complex128]) badorm.FieldCondition[basicslices.BasicSlices, []complex128] {
	return badorm.FieldCondition[basicslices.BasicSlices, []complex128]{
		Expressions: exprs,
		Field:       "Complex128",
	}
}
func BasicSlicesString(exprs ...badorm.Expression[[]string]) badorm.FieldCondition[basicslices.BasicSlices, []string] {
	return badorm.FieldCondition[basicslices.BasicSlices, []string]{
		Expressions: exprs,
		Field:       "String",
	}
}
func BasicSlicesByte(exprs ...badorm.Expression[[]uint8]) badorm.FieldCondition[basicslices.BasicSlices, []uint8] {
	return badorm.FieldCondition[basicslices.BasicSlices, []uint8]{
		Expressions: exprs,
		Field:       "Byte",
	}
}
