// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	hasmanywithpointers "github.com/ditrit/badaas/tools/badctl/cmd/gen/conditions/tests/hasmanywithpointers"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var sellerInPointersType = reflect.TypeOf(*new(hasmanywithpointers.SellerInPointers))
var SellerInPointersIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "ID",
	ModelType: sellerInPointersType,
}

func SellerInPointersId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return badorm.FieldCondition[hasmanywithpointers.SellerInPointers, badorm.UUID]{
		FieldIdentifier: SellerInPointersIdField,
		Operator:        operator,
	}
}

var SellerInPointersCreatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersCreatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return badorm.FieldCondition[hasmanywithpointers.SellerInPointers, time.Time]{
		FieldIdentifier: SellerInPointersCreatedAtField,
		Operator:        operator,
	}
}

var SellerInPointersUpdatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersUpdatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return badorm.FieldCondition[hasmanywithpointers.SellerInPointers, time.Time]{
		FieldIdentifier: SellerInPointersUpdatedAtField,
		Operator:        operator,
	}
}

var SellerInPointersDeletedAtField = badorm.FieldIdentifier[gorm.DeletedAt]{
	Field:     "DeletedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersDeletedAt(operator badorm.Operator[gorm.DeletedAt]) badorm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return badorm.FieldCondition[hasmanywithpointers.SellerInPointers, gorm.DeletedAt]{
		FieldIdentifier: SellerInPointersDeletedAtField,
		Operator:        operator,
	}
}
func SellerInPointersCompany(conditions ...badorm.Condition[hasmanywithpointers.CompanyWithPointers]) badorm.IJoinCondition[hasmanywithpointers.SellerInPointers] {
	return badorm.JoinCondition[hasmanywithpointers.SellerInPointers, hasmanywithpointers.CompanyWithPointers]{
		Conditions:         conditions,
		RelationField:      "Company",
		T1Field:            "CompanyID",
		T1PreloadCondition: SellerInPointersPreloadAttributes,
		T2Field:            "ID",
	}
}

var SellerInPointersPreloadCompany = SellerInPointersCompany(CompanyWithPointersPreloadAttributes)
var SellerInPointersCompanyIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "CompanyID",
	ModelType: sellerInPointersType,
}

func SellerInPointersCompanyId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return badorm.FieldCondition[hasmanywithpointers.SellerInPointers, badorm.UUID]{
		FieldIdentifier: SellerInPointersCompanyIdField,
		Operator:        operator,
	}
}

var SellerInPointersPreloadAttributes = badorm.NewPreloadCondition[hasmanywithpointers.SellerInPointers](SellerInPointersIdField, SellerInPointersCreatedAtField, SellerInPointersUpdatedAtField, SellerInPointersDeletedAtField, SellerInPointersCompanyIdField)
var SellerInPointersPreloadRelations = []badorm.Condition[hasmanywithpointers.SellerInPointers]{SellerInPointersPreloadCompany}
