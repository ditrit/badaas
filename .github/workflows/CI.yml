name: CI
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  branch-naming-rules:
    name: Check branch name
    runs-on: ubuntu-latest
    steps:
      - uses: deepakputhraya/action-branch-name@master
        with:
          regex: '^(feature|bugfix|improvement|library|prerelease|release|hotfix|poc)\/[a-z0-9_.-]+$'
          allowed_prefixes: 'feature,bugfix,improvement,library,prerelease,release,hotfix,poc'
          ignore: main,dev
          min_length: 5
          max_length: 50

  unit-tests:
    name: Unit tests
    needs: [branch-naming-rules]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
          cache: true
      - name: Run test
        run:  go test ./... -coverprofile=coverage.out -v
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.out

  check-style:
    name: Code style
    needs: [branch-naming-rules]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true
          skip-pkg-cache: true
          skip-build-cache: true

  integration-tests:
    name: Integration tests
    needs: [unit-tests, check-style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
          cache: true
      - name: Run test
        run:  make test_integration
      - name: Stop containers
        if: always()
        run: docker compose -f "docker/test_db/docker-compose.yml" down

  e2e-tests:
    name: E2E Tests
    needs: [integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
          cache: true
      - name: Start containers
        run: docker compose -f "docker/test_db/docker-compose.yml" -f "docker/test_api/docker-compose.yml" up -d --build
      - name: Wait for API server to be up
        uses: mydea/action-wait-for-api@v1
        with:
          url: "http://localhost:8000/info"
          timeout: 20
      - name: Run test
        run:  go test -tags=e2e ./test_e2e -v
      - name: Get logs 
        if: always()
        run: docker compose -f "docker/test_db/docker-compose.yml" -f "docker/test_api/docker-compose.yml" logs --no-color 2>&1 | tee app.log &
      - name: Stop containers
        if: always()
        run: docker compose -f "docker/test_db/docker-compose.yml" -f "docker/test_api/docker-compose.yml" down
      - uses: actions/upload-artifact@v3
        with:
          name: docker-compose-e2e-logs
          path: app.log

  sonarcloud:
    name: SonarCloud
    needs: [unit-tests, check-style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download line coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage.out
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

