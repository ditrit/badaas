==============================
Quickstart
==============================

BaDORM example
---------------------------

To quickly understand how to use BaDORM, you can head to the 
`example <https://github.com/ditrit/badorm-example>`_, where you will find two different variations:

- `standalone/` where BaDORM is used in the simplest possible way.
- `fx/` where BaDORM is used within the :ref:`fx dependency injection system <badorm/concepts:dependency injection>`

File structure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Both variations follow the same file structure:

- In `main.go` you will find the configuration required to use the BaDORM.
- In `example.go` you will find the actual example, where objects are created and then queried using BaDORM.
- In `models.go` you will find the :ref:`models <badorm/concepts:model>` definition.
- In `conditions/badorm.go` you will find the file that allows the :ref:`conditions generation <badorm/concepts:conditions generation>`.

Generate conditions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After choosing the example you want to run (`cd standalone` or `cd fx`) 
you will need to :ref:`generate the conditions <badorm/concepts:conditions generation>` for the models using `BaDctl`.

Install `badctl`:

.. code-block:: bash

  go install github.com/ditrit/badaas/tools/badctl

Generate conditions:

.. code-block:: bash

  go generate ./...

Now you will find in `conditions/` the :ref:`conditions <badorm/concepts:condition>` generated by badctl 
that allow you query the models in `example.go` and in `models/badorm.go` the :ref:`relation getters <badorm/concepts:relation getter>`.

Run it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

First, we need a database to store the data, in this case we will use CockroachDB:

.. code-block:: bash

  docker compose up -d

After that, we can run the application:

.. code-block:: bash

  go run .

And you should see something like:

.. code-block:: bash

  ...
  Migration finished, setting up CRUD example
  standalone/example.go:19 [2.405ms] [rows:0] SELECT products.* FROM "products" WHERE "products"."deleted_at" IS NULL
  Creating models
  standalone/example.go:30 [10.392ms] [rows:1] INSERT INTO "products" ("id","created_at","updated_at","deleted_at","string","int","float","bool") VALUES ('4e6d837b-5641-45c9-a028-e5251e1a18b1','2023-07-21 17:19:59.563','2023-07-21 17:19:59.563',NULL,'',1,0.000000,false)
  standalone/example.go:38 [8.917ms] [rows:1] INSERT INTO "products" ("id","created_at","updated_at","deleted_at","string","int","float","bool") VALUES ('c3816c70-0f32-46c0-9887-663239716950','2023-07-21 17:19:59.574','2023-07-21 17:19:59.574',NULL,'',2,0.000000,false)
  standalone/example.go:46 [9.388ms] [rows:1] INSERT INTO "companies" ("id","created_at","updated_at","deleted_at","name") VALUES ('5b287580-2354-4d9a-bcd8-19fc3408ffc0','2023-07-21 17:19:59.582','2023-07-21 17:19:59.582',NULL,'ditrit')
  standalone/example.go:53 [10.313ms] [rows:1] INSERT INTO "companies" ("id","created_at","updated_at","deleted_at","name") VALUES ('7184c91d-70bc-4eeb-a2ce-d7471da3c0a0','2023-07-21 17:19:59.592','2023-07-21 17:19:59.592',NULL,'orness')
  standalone/example.go:62 [7.553ms] [rows:1] INSERT INTO "sellers" ("id","created_at","updated_at","deleted_at","name","company_id") VALUES ('f72090b2-3bd3-47eb-bfb5-85e2ae18b02d','2023-07-21 17:19:59.603','2023-07-21 17:19:59.603',NULL,'franco','5b287580-2354-4d9a-bcd8-19fc3408ffc0')
  standalone/example.go:70 [8.303ms] [rows:1] INSERT INTO "sellers" ("id","created_at","updated_at","deleted_at","name","company_id") VALUES ('df7b837c-5e98-4568-8bc4-01d292ebc107','2023-07-21 17:19:59.61','2023-07-21 17:19:59.61',NULL,'agustin','7184c91d-70bc-4eeb-a2ce-d7471da3c0a0')
  standalone/example.go:79 [2.738ms] [rows:0] INSERT INTO "products" ("id","created_at","updated_at","deleted_at","string","int","float","bool") VALUES ('4e6d837b-5641-45c9-a028-e5251e1a18b1','2023-07-21 17:19:59.563','2023-07-21 17:19:59.563',NULL,'',1,0.000000,false) ON CONFLICT DO NOTHING
  standalone/example.go:79 [3.038ms] [rows:0] INSERT INTO "sellers" ("id","created_at","updated_at","deleted_at","name","company_id") VALUES ('f72090b2-3bd3-47eb-bfb5-85e2ae18b02d','2023-07-21 17:19:59.603','2023-07-21 17:19:59.603',NULL,'franco','5b287580-2354-4d9a-bcd8-19fc3408ffc0') ON CONFLICT DO NOTHING
  standalone/example.go:79 [16.352ms] [rows:1] INSERT INTO "sales" ("id","created_at","updated_at","deleted_at","product_id","seller_id") VALUES ('2c9812b2-5a48-4066-8cbd-7c44ae1f2d4d','2023-07-21 17:19:59.625','2023-07-21 17:19:59.625',NULL,'4e6d837b-5641-45c9-a028-e5251e1a18b1','f72090b2-3bd3-47eb-bfb5-85e2ae18b02d')
  standalone/example.go:87 [1.195ms] [rows:0] INSERT INTO "products" ("id","created_at","updated_at","deleted_at","string","int","float","bool") VALUES ('c3816c70-0f32-46c0-9887-663239716950','2023-07-21 17:19:59.574','2023-07-21 17:19:59.574',NULL,'',2,0.000000,false) ON CONFLICT DO NOTHING
  standalone/example.go:87 [1.450ms] [rows:0] INSERT INTO "sellers" ("id","created_at","updated_at","deleted_at","name","company_id") VALUES ('df7b837c-5e98-4568-8bc4-01d292ebc107','2023-07-21 17:19:59.61','2023-07-21 17:19:59.61',NULL,'agustin','7184c91d-70bc-4eeb-a2ce-d7471da3c0a0') ON CONFLICT DO NOTHING
  standalone/example.go:87 [14.586ms] [rows:1] INSERT INTO "sales" ("id","created_at","updated_at","deleted_at","product_id","seller_id") VALUES ('66989caa-704a-4558-8315-4c973e3d4666','2023-07-21 17:19:59.638','2023-07-21 17:19:59.638',NULL,'c3816c70-0f32-46c0-9887-663239716950','df7b837c-5e98-4568-8bc4-01d292ebc107')
  Finished creating models
  standalone/example.go:104 [3.224ms] [rows:1] SELECT products.* FROM "products" WHERE products.int = 1 AND "products"."deleted_at" IS NULL
  Products with int = 1 are:
  &{UUIDModel:{ID:4e6d837b-5641-45c9-a028-e5251e1a18b1 CreatedAt:2023-07-21 17:19:59.563374 +0200 CEST UpdatedAt:2023-07-21 17:19:59.563374 +0200 CEST DeletedAt:{Time:0001-01-01 00:00:00 +0000 UTC Valid:false}} String: Int:1 Float:0 Bool:false}

Understand it (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this section we will see the steps carried out to develop this example.

**Standalone**

Once you have started your project with `go init`, you must add the dependency to BaDaaS and others:

.. code-block:: bash

    go get -u github.com/ditrit/badaas gorm.io/gorm

In models.go the :ref:`models <badorm/concepts:model>` are defined and 
in conditions/badorm.go the file required to 
:ref:`generate the conditions <badorm/concepts:conditions generation>` is created.

In main.go a main function is created with the configuration required to use the BaDORM. 
First, we need to create a :ref:`gormDB <badorm/concepts:gormDB>` that allows connection with the database:

.. code-block:: go

    gormDB, err := NewGormDBConnection()

After that, we have to call the :ref:`AutoMigrate <badorm/concepts:auto migration>` 
method of the gormDB with the models you want to be persisted::

    err = gormDB.AutoMigrate(
      models.Product{},
      models.Company{},
      models.Seller{},
      models.Sale{},
    )

From here, we can start to use BaDORM, getting the :ref:`CRUDService <badorm/concepts:CRUDService>` 
and :ref:`CRUDRepository <badorm/concepts:CRUDRepository>` of a model with the GetCRUD function:

.. code-block:: go

    crudProductService, crudProductRepository := badorm.GetCRUD[models.Product, badorm.UUID](gormDB)

As you can see, we need to specify the type of the model and the kind 
of :ref:`id <badorm/concepts:model ID>` this model uses.

Finally, you can use this service and repository to perform CRUD operations on your model:

.. code-block:: go

  CreateCRUDObjects(gormDB, crudProductRepository)
  QueryCRUDObjects(crudProductService)

This two functions are defined in `example.go`. 
In `QueryCRUDObjects` you can find a basic usage of the 
:ref:`compilable query system <badorm/concepts:compilable query system>`.

**Fx**

Once you have started your project with `go init`, you must add the dependency to BaDaaS and others:

.. code-block:: bash

  go get -u github.com/ditrit/badaas github.com/uber-go/fx github.com/uber-go/zap gorm.io/gorm

In models.go the :ref:`models <badorm/concepts:model>` are defined and 
in conditions/badorm.go the file required to 
:ref:`generate the conditions <badorm/concepts:conditions generation>` is created.

In main.go a main function is created with the configuration required to use the BaDORM with fx. 
First, we will need to start your application with `fx`:

.. code-block:: go

    func main() {
      fx.New(
        // activate BaDORM
        fx.Provide(NewLogger),
        fx.Provide(NewGormDBConnection),
        fx.Provide(GetModels),
        badorm.BaDORMModule,

        // logger for fx
        fx.WithLogger(func(logger *zap.Logger) fxevent.Logger {
          return &fxevent.ZapLogger{Logger: logger}
        }),

        // start example data
        badorm.GetCRUDServiceModule[models.Company](),
        badorm.GetCRUDServiceModule[models.Product](),
        badorm.GetCRUDServiceModule[models.Seller](),
        badorm.GetCRUDServiceModule[models.Sale](),

        fx.Provide(CreateCRUDObjects),
        fx.Invoke(QueryCRUDObjects),
      ).Run()
    }

There are some things you need to provide to the BaDORM module:

- `NewLogger` (optional) in this case we will use the zap logger instead of the gorm logger, 
  so we have to provide it and then use it as a logger for fx. 
  For more information visit :doc:`logger`.
- `NewGORMDBConnection` is the function that we need to create 
  a :ref:`gormDB <badorm/concepts:gormDB>` that allows connection with the database.
- `GetModels` is a function that returns in a `badorm.GetModelsResult` the list of models 
  you want to be persisted by the :ref:`auto migration <badorm/concepts:auto migration>`.

After that, we need to start the `badorm.BaDORMModule` and we are ready create 
:ref:`CRUDServices <badorm/concepts:CRUDService>` to your models using `badorm.GetCRUDServiceModule`.

Finally, we call the functions `CreateCRUDObjects` 
and `QueryCRUDObjects` where the CRUDServices are injected to create, 
read, update and delete the models easily. This two functions are defined in `example.go`. 
In `QueryCRUDObjects` you can find a basic usage of the compiled query system.u can find a basic usage of the 
:ref:`compilable query system <badorm/concepts:compilable query system>`.