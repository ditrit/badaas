==============================
Quickstart
==============================

BaDORM example
---------------------------

To quickly understand how to use BaDORM, you can head to the 
`example <https://github.com/ditrit/badorm-example>`_, where you will find two different variations:

- `standalone/` where BaDORM is used in the simplest possible way.
- `fx/` where BaDORM is used within the :ref:`fx dependency injection system <badorm/concepts:dependency injection>`

File structure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Both variations follow the same file structure:

- In `main.go` you will find the configuration required to use the BaDORM.
- In `example.go` you will find the actual example, where objects are created and then queried using BaDORM.
- In `models.go` you will find the :ref:`models <badorm/concepts:model>` definition.
- In `conditions/badorm.go` you will find the file that allows the :ref:`conditions generation <badorm/concepts:conditions generation>`.

Generate conditions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After choosing the example you want to run (`cd standalone` or `cd fx`) 
you will need to :ref:`generate the conditions <badorm/concepts:conditions generation>` for the models using `BaDctl`.

Install `badctl`:

.. code-block:: bash

  go install github.com/ditrit/badaas/tools/badctl

Generate conditions:

.. code-block:: bash

  go generate ./...

Now you will find in `conditions/` the :ref:`conditions <badorm/concepts:condition>` generated by badctl 
that allow you query the models in `example.go` and in `models/badorm.go` the :ref:`relation getters <badorm/concepts:relation getter>`.

Run it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

First, we need a database to store the data, in this case we will use CockroachDB:

.. code-block:: bash

  docker compose up -d

After that, we can run the application:

.. code-block:: bash

  go run .

And you should see something like:

.. code-block:: bash

  2023/05/16 09:52:03 Setting up CRUD example
  2023/05/16 09:52:03 Finished creating CRUD example
  2023/05/16 09:52:03 Products with int = 1 are:
  &{UUIDModel:{ID:1483487f-c585-4455-8d5b-2a58be27acbc CreatedAt:2023-05-16 09:50:12.025843 +0200 CEST UpdatedAt:2023-05-16 09:50:12.025843 +0200 CEST DeletedAt:{Time:0001-01-01 00:00:00 +0000 UTC Valid:false}} String: Int:1 Float:0 Bool:false}

Understand it (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this section we will see the steps carried out to develop this example.

**Standalone**

Once you have started your project with `go init`, you must add the dependency to BaDaaS and others:

.. code-block:: bash

    go get -u github.com/ditrit/badaas github.com/uber-go/zap gorm.io/gorm

.. TODO quisiera sacar esta dependencia de zap

In models.go the :ref:`models <badorm/concepts:model>` are defined and 
in conditions/badorm.go the file required to 
:ref:`generate the conditions <badorm/concepts:conditions generation>` is created.

In main.go a main function is created with the configuration required to use the BaDORM. 
First, we need to create a :ref:`gormDB <badorm/concepts:gormDB>` that allows connection with the database:

.. code-block:: go

    gormDB, err := NewGormDBConnection()

After that, we have to call the :ref:`AutoMigrate <badorm/concepts:auto migration>` 
method of the gormDB with the models you want to be persisted::

    err = gormDB.AutoMigrate(
      models.Product{},
      models.Company{},
      models.Seller{},
      models.Sale{},
    )

From here, we can start to use BaDORM, getting the :ref:`CRUDService <badorm/concepts:CRUDService>` 
and :ref:`CRUDRepository <badorm/concepts:CRUDRepository>` of a model with the GetCRUD function:

.. code-block:: go

    crudProductService, crudProductRepository := badorm.GetCRUD[models.Product, badorm.UUID](gormDB)

As you can see, we need to specify the type of the model and the kind 
of :ref:`id <badorm/concepts:model ID>` this model uses.

Finally, you can use this service and repository to perform CRUD operations on your model:

.. code-block:: go

  CreateCRUDObjects(gormDB, crudProductRepository)
  QueryCRUDObjects(crudProductService)

This two functions are defined in `example.go`. 
In `QueryCRUDObjects` you can find a basic usage of the 
:ref:`compilable query system <badorm/concepts:compilable query system>`.

**Fx**

Once you have started your project with `go init`, you must add the dependency to BaDaaS and others:

.. code-block:: bash

  go get -u github.com/ditrit/badaas github.com/uber-go/fx github.com/uber-go/zap gorm.io/gorm

.. TODO quisiera sacar esta dependencia de zap

In models.go the :ref:`models <badorm/concepts:model>` are defined and 
in conditions/badorm.go the file required to 
:ref:`generate the conditions <badorm/concepts:conditions generation>` is created.

In main.go a main function is created with the configuration required to use the BaDORM with fx. 
First, we will need to start your application with `fx`:

.. code-block:: go

    func main() {
      fx.New(
        // activate BaDORM
        fx.Provide(NewGormDBConnection),
        fx.Provide(GetModels),
        badorm.BaDORMModule,

        // start example data
        badorm.GetCRUDServiceModule[models.Company](),
        badorm.GetCRUDServiceModule[models.Product](),
        badorm.GetCRUDServiceModule[models.Seller](),
        badorm.GetCRUDServiceModule[models.Sale](),

        fx.Provide(CreateCRUDObjects),
        fx.Invoke(QueryCRUDObjects),
      ).Run()
    }

There are some things you need to provide to the BaDORM module:

- `NewGORMDBConnection` is the function that we need to create 
  a :ref:`gormDB <badorm/concepts:gormDB>` that allows connection with the database.
- `GetModels` is a function that returns in a `badorm.GetModelsResult` the list of models 
  you want to be persisted by the :ref:`auto migration <badorm/concepts:auto migration>`.

After that, we need to start the `badorm.BaDORMModule` and we are ready create 
:ref:`CRUDServices <badorm/concepts:CRUDService>` to your models using `badorm.GetCRUDServiceModule`.

Finally, we call the functions `CreateCRUDObjects` 
and `QueryCRUDObjects` where the CRUDServices are injected to create, 
read, update and delete the models easily. This two functions are defined in `example.go`. 
In `QueryCRUDObjects` yoIn `QueryCRUDObjects` you can find a basic usage of the compiled query system.u can find a basic usage of the 
:ref:`compilable query system <badorm/concepts:compilable query system>`.

BaDaaS example
---------------------------

If you are interested in using BaDORM within a BaDaaS application you can 
consult the `badaas example <https://github.com/ditrit/badaas-example>`_. 
in which besides using the services and repositories provided by BaDorm, 
BaDaaS adds a controller that allows the query of objects via an http api.