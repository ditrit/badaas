// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"time"
)

func SaleId(expr badorm.Expression[badorm.UUID]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, badorm.UUID]{
		Expression:      expr,
		FieldIdentifier: badorm.IDFieldID,
	}
}
func SaleCreatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, time.Time]{
		Expression:      expr,
		FieldIdentifier: badorm.CreatedAtFieldID,
	}
}
func SaleUpdatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, time.Time]{
		Expression:      expr,
		FieldIdentifier: badorm.UpdatedAtFieldID,
	}
}
func SaleDeletedAt(expr badorm.Expression[gorm.DeletedAt]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, gorm.DeletedAt]{
		Expression:      expr,
		FieldIdentifier: badorm.DeletedAtFieldID,
	}
}
func SaleCode(expr badorm.Expression[int]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, int]{
		Expression:      expr,
		FieldIdentifier: badorm.FieldIdentifier{Field: "Code"},
	}
}
func SaleDescription(expr badorm.Expression[string]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, string]{
		Expression:      expr,
		FieldIdentifier: badorm.FieldIdentifier{Field: "Description"},
	}
}
func SaleProduct(conditions ...badorm.Condition[models.Product]) badorm.Condition[models.Sale] {
	return badorm.JoinCondition[models.Sale, models.Product]{
		Conditions:    conditions,
		RelationField: "Product",
		T1Field:       "ProductID",
		T2Field:       "ID",
	}
}
func SaleProductId(expr badorm.Expression[badorm.UUID]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, badorm.UUID]{
		Expression:      expr,
		FieldIdentifier: badorm.FieldIdentifier{Field: "ProductID"},
	}
}
func SaleSeller(conditions ...badorm.Condition[models.Seller]) badorm.Condition[models.Sale] {
	return badorm.JoinCondition[models.Sale, models.Seller]{
		Conditions:    conditions,
		RelationField: "Seller",
		T1Field:       "SellerID",
		T2Field:       "ID",
	}
}
func SaleSellerId(expr badorm.Expression[badorm.UUID]) badorm.WhereCondition[models.Sale] {
	return badorm.FieldCondition[models.Sale, badorm.UUID]{
		Expression:      expr,
		FieldIdentifier: badorm.FieldIdentifier{Field: "SellerID"},
	}
}
