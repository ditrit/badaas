// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"time"
)

func SaleId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[models.Sale, badorm.UUID] {
	return badorm.FieldCondition[models.Sale, badorm.UUID]{
		Expressions: exprs,
		Field:       "ID",
	}
}
func SaleCreatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[models.Sale, time.Time] {
	return badorm.FieldCondition[models.Sale, time.Time]{
		Expressions: exprs,
		Field:       "CreatedAt",
	}
}
func SaleUpdatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[models.Sale, time.Time] {
	return badorm.FieldCondition[models.Sale, time.Time]{
		Expressions: exprs,
		Field:       "UpdatedAt",
	}
}
func SaleDeletedAt(exprs ...badorm.Expression[gorm.DeletedAt]) badorm.FieldCondition[models.Sale, gorm.DeletedAt] {
	return badorm.FieldCondition[models.Sale, gorm.DeletedAt]{
		Expressions: exprs,
		Field:       "DeletedAt",
	}
}
func SaleCode(exprs ...badorm.Expression[int]) badorm.FieldCondition[models.Sale, int] {
	return badorm.FieldCondition[models.Sale, int]{
		Expressions: exprs,
		Field:       "Code",
	}
}
func SaleDescription(exprs ...badorm.Expression[string]) badorm.FieldCondition[models.Sale, string] {
	return badorm.FieldCondition[models.Sale, string]{
		Expressions: exprs,
		Field:       "Description",
	}
}
func SaleProduct(conditions ...badorm.Condition[models.Product]) badorm.Condition[models.Sale] {
	return badorm.JoinCondition[models.Sale, models.Product]{
		Conditions: conditions,
		T1Field:    "ProductID",
		T2Field:    "ID",
	}
}
func SaleProductId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[models.Sale, badorm.UUID] {
	return badorm.FieldCondition[models.Sale, badorm.UUID]{
		Expressions: exprs,
		Field:       "ProductID",
	}
}
func SaleSeller(conditions ...badorm.Condition[models.Seller]) badorm.Condition[models.Sale] {
	return badorm.JoinCondition[models.Sale, models.Seller]{
		Conditions: conditions,
		T1Field:    "SellerID",
		T2Field:    "ID",
	}
}
func SaleSellerId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[models.Sale, badorm.UUID] {
	return badorm.FieldCondition[models.Sale, badorm.UUID]{
		Expressions: exprs,
		Field:       "SellerID",
	}
}
