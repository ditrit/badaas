// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var phoneType = reflect.TypeOf(*new(models.Phone))
var PhoneIdField = badorm.FieldIdentifier{
	Field:     "ID",
	ModelType: phoneType,
	Type:      reflect.TypeOf(*new(badorm.UIntID)),
}

func PhoneId(expr badorm.Expression[badorm.UIntID]) badorm.WhereCondition[models.Phone] {
	return badorm.FieldCondition[models.Phone, badorm.UIntID]{
		Expression:      expr,
		FieldIdentifier: PhoneIdField,
	}
}

var PhoneCreatedAtField = badorm.FieldIdentifier{
	Field:     "CreatedAt",
	ModelType: phoneType,
	Type:      reflect.TypeOf(*new(time.Time)),
}

func PhoneCreatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Phone] {
	return badorm.FieldCondition[models.Phone, time.Time]{
		Expression:      expr,
		FieldIdentifier: PhoneCreatedAtField,
	}
}

var PhoneUpdatedAtField = badorm.FieldIdentifier{
	Field:     "UpdatedAt",
	ModelType: phoneType,
	Type:      reflect.TypeOf(*new(time.Time)),
}

func PhoneUpdatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Phone] {
	return badorm.FieldCondition[models.Phone, time.Time]{
		Expression:      expr,
		FieldIdentifier: PhoneUpdatedAtField,
	}
}

var PhoneDeletedAtField = badorm.FieldIdentifier{
	Field:     "DeletedAt",
	ModelType: phoneType,
	Type:      reflect.TypeOf(*new(gorm.DeletedAt)),
}

func PhoneDeletedAt(expr badorm.Expression[gorm.DeletedAt]) badorm.WhereCondition[models.Phone] {
	return badorm.FieldCondition[models.Phone, gorm.DeletedAt]{
		Expression:      expr,
		FieldIdentifier: PhoneDeletedAtField,
	}
}

var PhoneNameField = badorm.FieldIdentifier{
	Field:     "Name",
	ModelType: phoneType,
	Type:      reflect.TypeOf(*new(string)),
}

func PhoneName(expr badorm.Expression[string]) badorm.WhereCondition[models.Phone] {
	return badorm.FieldCondition[models.Phone, string]{
		Expression:      expr,
		FieldIdentifier: PhoneNameField,
	}
}
func PhoneBrand(conditions ...badorm.Condition[models.Brand]) badorm.IJoinCondition[models.Phone] {
	return badorm.JoinCondition[models.Phone, models.Brand]{
		Conditions:         conditions,
		RelationField:      "Brand",
		T1Field:            "BrandID",
		T1PreloadCondition: PhonePreloadAttributes,
		T2Field:            "ID",
	}
}

var PhonePreloadBrand = PhoneBrand(BrandPreloadAttributes)
var PhoneBrandIdField = badorm.FieldIdentifier{
	Field:     "BrandID",
	ModelType: phoneType,
	Type:      reflect.TypeOf(*new(uint)),
}

func PhoneBrandId(expr badorm.Expression[uint]) badorm.WhereCondition[models.Phone] {
	return badorm.FieldCondition[models.Phone, uint]{
		Expression:      expr,
		FieldIdentifier: PhoneBrandIdField,
	}
}

var PhonePreloadAttributes = badorm.NewPreloadCondition[models.Phone](PhoneIdField, PhoneCreatedAtField, PhoneUpdatedAtField, PhoneDeletedAtField, PhoneNameField, PhoneBrandIdField)
var PhonePreloadRelations = []badorm.Condition[models.Phone]{PhonePreloadBrand}
