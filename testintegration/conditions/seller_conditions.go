// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var sellerType = reflect.TypeOf(*new(models.Seller))
var SellerIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "ID",
	ModelType: sellerType,
}

func SellerId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, badorm.UUID]{
		FieldIdentifier: SellerIdField,
		Operator:        operator,
	}
}

var SellerCreatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerType,
}

func SellerCreatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, time.Time]{
		FieldIdentifier: SellerCreatedAtField,
		Operator:        operator,
	}
}

var SellerUpdatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerType,
}

func SellerUpdatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, time.Time]{
		FieldIdentifier: SellerUpdatedAtField,
		Operator:        operator,
	}
}

var SellerDeletedAtField = badorm.FieldIdentifier[gorm.DeletedAt]{
	Field:     "DeletedAt",
	ModelType: sellerType,
}

func SellerDeletedAt(operator badorm.Operator[gorm.DeletedAt]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, gorm.DeletedAt]{
		FieldIdentifier: SellerDeletedAtField,
		Operator:        operator,
	}
}

var SellerNameField = badorm.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: sellerType,
}

func SellerName(operator badorm.Operator[string]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, string]{
		FieldIdentifier: SellerNameField,
		Operator:        operator,
	}
}
func SellerCompany(conditions ...badorm.Condition[models.Company]) badorm.IJoinCondition[models.Seller] {
	return badorm.JoinCondition[models.Seller, models.Company]{
		Conditions:         conditions,
		RelationField:      "Company",
		T1Field:            "CompanyID",
		T1PreloadCondition: SellerPreloadAttributes,
		T2Field:            "ID",
	}
}

var SellerPreloadCompany = SellerCompany(CompanyPreloadAttributes)
var SellerCompanyIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "CompanyID",
	ModelType: sellerType,
}

func SellerCompanyId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, badorm.UUID]{
		FieldIdentifier: SellerCompanyIdField,
		Operator:        operator,
	}
}
func SellerUniversity(conditions ...badorm.Condition[models.University]) badorm.IJoinCondition[models.Seller] {
	return badorm.JoinCondition[models.Seller, models.University]{
		Conditions:         conditions,
		RelationField:      "University",
		T1Field:            "UniversityID",
		T1PreloadCondition: SellerPreloadAttributes,
		T2Field:            "ID",
	}
}

var SellerPreloadUniversity = SellerUniversity(UniversityPreloadAttributes)
var SellerUniversityIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "UniversityID",
	ModelType: sellerType,
}

func SellerUniversityId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[models.Seller] {
	return badorm.FieldCondition[models.Seller, badorm.UUID]{
		FieldIdentifier: SellerUniversityIdField,
		Operator:        operator,
	}
}

var SellerPreloadAttributes = badorm.NewPreloadCondition[models.Seller](SellerIdField, SellerCreatedAtField, SellerUpdatedAtField, SellerDeletedAtField, SellerNameField, SellerCompanyIdField, SellerUniversityIdField)
var SellerPreloadRelations = []badorm.Condition[models.Seller]{SellerPreloadCompany, SellerPreloadUniversity}
