// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	"database/sql"
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var productType = reflect.TypeOf(*new(models.Product))
var ProductIdField = badorm.FieldIdentifier{
	Field:     "ID",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(badorm.UUID)),
}

func ProductId(expr badorm.Expression[badorm.UUID]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, badorm.UUID]{
		Expression:      expr,
		FieldIdentifier: ProductIdField,
	}
}

var ProductCreatedAtField = badorm.FieldIdentifier{
	Field:     "CreatedAt",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(time.Time)),
}

func ProductCreatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, time.Time]{
		Expression:      expr,
		FieldIdentifier: ProductCreatedAtField,
	}
}

var ProductUpdatedAtField = badorm.FieldIdentifier{
	Field:     "UpdatedAt",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(time.Time)),
}

func ProductUpdatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, time.Time]{
		Expression:      expr,
		FieldIdentifier: ProductUpdatedAtField,
	}
}

var ProductDeletedAtField = badorm.FieldIdentifier{
	Field:     "DeletedAt",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(gorm.DeletedAt)),
}

func ProductDeletedAt(expr badorm.Expression[gorm.DeletedAt]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, gorm.DeletedAt]{
		Expression:      expr,
		FieldIdentifier: ProductDeletedAtField,
	}
}

var ProductStringField = badorm.FieldIdentifier{
	Column:    "string_something_else",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(string)),
}

func ProductString(expr badorm.Expression[string]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, string]{
		Expression:      expr,
		FieldIdentifier: ProductStringField,
	}
}

var ProductIntField = badorm.FieldIdentifier{
	Field:     "Int",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(int)),
}

func ProductInt(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression:      expr,
		FieldIdentifier: ProductIntField,
	}
}

var ProductIntPointerField = badorm.FieldIdentifier{
	Field:     "IntPointer",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(int)),
}

func ProductIntPointer(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression:      expr,
		FieldIdentifier: ProductIntPointerField,
	}
}

var ProductFloatField = badorm.FieldIdentifier{
	Field:     "Float",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(float64)),
}

func ProductFloat(expr badorm.Expression[float64]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, float64]{
		Expression:      expr,
		FieldIdentifier: ProductFloatField,
	}
}

var ProductNullFloatField = badorm.FieldIdentifier{
	Field:     "NullFloat",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(sql.NullFloat64)),
}

func ProductNullFloat(expr badorm.Expression[sql.NullFloat64]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, sql.NullFloat64]{
		Expression:      expr,
		FieldIdentifier: ProductNullFloatField,
	}
}

var ProductBoolField = badorm.FieldIdentifier{
	Field:     "Bool",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(bool)),
}

func ProductBool(expr badorm.Expression[bool]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, bool]{
		Expression:      expr,
		FieldIdentifier: ProductBoolField,
	}
}

var ProductNullBoolField = badorm.FieldIdentifier{
	Field:     "NullBool",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(sql.NullBool)),
}

func ProductNullBool(expr badorm.Expression[sql.NullBool]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, sql.NullBool]{
		Expression:      expr,
		FieldIdentifier: ProductNullBoolField,
	}
}

var ProductByteArrayField = badorm.FieldIdentifier{
	Field:     "ByteArray",
	ModelType: productType,
	Type:      reflect.TypeOf(*new([]uint8)),
}

func ProductByteArray(expr badorm.Expression[[]uint8]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, []uint8]{
		Expression:      expr,
		FieldIdentifier: ProductByteArrayField,
	}
}

var ProductMultiStringField = badorm.FieldIdentifier{
	Field:     "MultiString",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(models.MultiString)),
}

func ProductMultiString(expr badorm.Expression[models.MultiString]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, models.MultiString]{
		Expression:      expr,
		FieldIdentifier: ProductMultiStringField,
	}
}

var ProductToBeEmbeddedEmbeddedIntField = badorm.FieldIdentifier{
	Field:     "EmbeddedInt",
	ModelType: productType,
	Type:      reflect.TypeOf(*new(int)),
}

func ProductToBeEmbeddedEmbeddedInt(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression:      expr,
		FieldIdentifier: ProductToBeEmbeddedEmbeddedIntField,
	}
}

var ProductGormEmbeddedIntField = badorm.FieldIdentifier{
	ColumnPrefix: "gorm_embedded_",
	Field:        "Int",
	ModelType:    productType,
	Type:         reflect.TypeOf(*new(int)),
}

func ProductGormEmbeddedInt(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression:      expr,
		FieldIdentifier: ProductGormEmbeddedIntField,
	}
}

var ProductPreloadAttributes = badorm.NewPreloadCondition[models.Product](ProductIdField, ProductCreatedAtField, ProductUpdatedAtField, ProductDeletedAtField, ProductStringField, ProductIntField, ProductIntPointerField, ProductFloatField, ProductNullFloatField, ProductBoolField, ProductNullBoolField, ProductByteArrayField, ProductMultiStringField, ProductToBeEmbeddedEmbeddedIntField, ProductGormEmbeddedIntField)
