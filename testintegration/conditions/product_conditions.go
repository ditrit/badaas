// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	"database/sql"
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"time"
)

func ProductId(expr badorm.Expression[badorm.UUID]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, badorm.UUID]{
		Expression: expr,
		Field:      "ID",
	}
}
func ProductCreatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, time.Time]{
		Expression: expr,
		Field:      "CreatedAt",
	}
}
func ProductUpdatedAt(expr badorm.Expression[time.Time]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, time.Time]{
		Expression: expr,
		Field:      "UpdatedAt",
	}
}
func ProductDeletedAt(expr badorm.Expression[gorm.DeletedAt]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, gorm.DeletedAt]{
		Expression: expr,
		Field:      "DeletedAt",
	}
}
func ProductString(expr badorm.Expression[string]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, string]{
		Column:     "string_something_else",
		Expression: expr,
	}
}
func ProductInt(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression: expr,
		Field:      "Int",
	}
}
func ProductIntPointer(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression: expr,
		Field:      "IntPointer",
	}
}
func ProductFloat(expr badorm.Expression[float64]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, float64]{
		Expression: expr,
		Field:      "Float",
	}
}
func ProductNullFloat(expr badorm.Expression[sql.NullFloat64]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, sql.NullFloat64]{
		Expression: expr,
		Field:      "NullFloat",
	}
}
func ProductBool(expr badorm.Expression[bool]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, bool]{
		Expression: expr,
		Field:      "Bool",
	}
}
func ProductNullBool(expr badorm.Expression[sql.NullBool]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, sql.NullBool]{
		Expression: expr,
		Field:      "NullBool",
	}
}
func ProductByteArray(expr badorm.Expression[[]uint8]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, []uint8]{
		Expression: expr,
		Field:      "ByteArray",
	}
}
func ProductMultiString(expr badorm.Expression[models.MultiString]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, models.MultiString]{
		Expression: expr,
		Field:      "MultiString",
	}
}
func ProductEmbeddedInt(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		Expression: expr,
		Field:      "EmbeddedInt",
	}
}
func ProductGormEmbeddedInt(expr badorm.Expression[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		ColumnPrefix: "gorm_embedded_",
		Expression:   expr,
		Field:        "Int",
	}
}
