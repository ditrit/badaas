// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"time"
)

func ProductId(exprs ...orm.Expression[orm.UUID]) orm.FieldCondition[models.Product, orm.UUID] {
	return orm.FieldCondition[models.Product, orm.UUID]{
		Expressions: exprs,
		Field:       "ID",
	}
}
func ProductCreatedAt(exprs ...orm.Expression[time.Time]) orm.FieldCondition[models.Product, time.Time] {
	return orm.FieldCondition[models.Product, time.Time]{
		Expressions: exprs,
		Field:       "CreatedAt",
	}
}
func ProductUpdatedAt(exprs ...orm.Expression[time.Time]) orm.FieldCondition[models.Product, time.Time] {
	return orm.FieldCondition[models.Product, time.Time]{
		Expressions: exprs,
		Field:       "UpdatedAt",
	}
}
func ProductDeletedAt(exprs ...orm.Expression[gorm.DeletedAt]) orm.FieldCondition[models.Product, gorm.DeletedAt] {
	return orm.FieldCondition[models.Product, gorm.DeletedAt]{
		Expressions: exprs,
		Field:       "DeletedAt",
	}
}
func ProductString(exprs ...orm.Expression[string]) orm.FieldCondition[models.Product, string] {
	return orm.FieldCondition[models.Product, string]{
		Column:      "string_something_else",
		Expressions: exprs,
	}
}
func ProductInt(exprs ...orm.Expression[int]) orm.FieldCondition[models.Product, int] {
	return orm.FieldCondition[models.Product, int]{
		Expressions: exprs,
		Field:       "Int",
	}
}
func ProductIntPointer(exprs ...orm.Expression[*int]) orm.FieldCondition[models.Product, *int] {
	return orm.FieldCondition[models.Product, *int]{
		Expressions: exprs,
		Field:       "IntPointer",
	}
}
func ProductFloat(exprs ...orm.Expression[float64]) orm.FieldCondition[models.Product, float64] {
	return orm.FieldCondition[models.Product, float64]{
		Expressions: exprs,
		Field:       "Float",
	}
}
func ProductBool(exprs ...orm.Expression[bool]) orm.FieldCondition[models.Product, bool] {
	return orm.FieldCondition[models.Product, bool]{
		Expressions: exprs,
		Field:       "Bool",
	}
}
func ProductByteArray(exprs ...orm.Expression[[]uint8]) orm.FieldCondition[models.Product, []uint8] {
	return orm.FieldCondition[models.Product, []uint8]{
		Expressions: exprs,
		Field:       "ByteArray",
	}
}
func ProductMultiString(exprs ...orm.Expression[models.MultiString]) orm.FieldCondition[models.Product, models.MultiString] {
	return orm.FieldCondition[models.Product, models.MultiString]{
		Expressions: exprs,
		Field:       "MultiString",
	}
}
func ProductEmbeddedInt(exprs ...orm.Expression[int]) orm.FieldCondition[models.Product, int] {
	return orm.FieldCondition[models.Product, int]{
		Expressions: exprs,
		Field:       "EmbeddedInt",
	}
}
func ProductGormEmbeddedInt(exprs ...orm.Expression[int]) orm.FieldCondition[models.Product, int] {
	return orm.FieldCondition[models.Product, int]{
		ColumnPrefix: "gorm_embedded_",
		Expressions:  exprs,
		Field:        "Int",
	}
}
