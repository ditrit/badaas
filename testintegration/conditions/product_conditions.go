// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	"database/sql"
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"time"
)

func ProductId(exprs ...badorm.Expression[badorm.UUID]) badorm.FieldCondition[models.Product, badorm.UUID] {
	return badorm.FieldCondition[models.Product, badorm.UUID]{
		Expressions: exprs,
		Field:       "ID",
	}
}
func ProductCreatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[models.Product, time.Time] {
	return badorm.FieldCondition[models.Product, time.Time]{
		Expressions: exprs,
		Field:       "CreatedAt",
	}
}
func ProductUpdatedAt(exprs ...badorm.Expression[time.Time]) badorm.FieldCondition[models.Product, time.Time] {
	return badorm.FieldCondition[models.Product, time.Time]{
		Expressions: exprs,
		Field:       "UpdatedAt",
	}
}
func ProductDeletedAt(exprs ...badorm.Expression[gorm.DeletedAt]) badorm.FieldCondition[models.Product, gorm.DeletedAt] {
	return badorm.FieldCondition[models.Product, gorm.DeletedAt]{
		Expressions: exprs,
		Field:       "DeletedAt",
	}
}
func ProductString(exprs ...badorm.Expression[string]) badorm.FieldCondition[models.Product, string] {
	return badorm.FieldCondition[models.Product, string]{
		Column:      "string_something_else",
		Expressions: exprs,
	}
}
func ProductInt(exprs ...badorm.Expression[int]) badorm.FieldCondition[models.Product, int] {
	return badorm.FieldCondition[models.Product, int]{
		Expressions: exprs,
		Field:       "Int",
	}
}
func ProductIntPointer(exprs ...badorm.Expression[int]) badorm.FieldCondition[models.Product, int] {
	return badorm.FieldCondition[models.Product, int]{
		Expressions: exprs,
		Field:       "IntPointer",
	}
}
func ProductFloat(exprs ...badorm.Expression[float64]) badorm.FieldCondition[models.Product, float64] {
	return badorm.FieldCondition[models.Product, float64]{
		Expressions: exprs,
		Field:       "Float",
	}
}
func ProductNullFloat(exprs ...badorm.Expression[sql.NullFloat64]) badorm.FieldCondition[models.Product, sql.NullFloat64] {
	return badorm.FieldCondition[models.Product, sql.NullFloat64]{
		Expressions: exprs,
		Field:       "NullFloat",
	}
}
func ProductBool(exprs ...badorm.Expression[bool]) badorm.FieldCondition[models.Product, bool] {
	return badorm.FieldCondition[models.Product, bool]{
		Expressions: exprs,
		Field:       "Bool",
	}
}
func ProductNullBool(exprs ...badorm.Expression[sql.NullBool]) badorm.FieldCondition[models.Product, sql.NullBool] {
	return badorm.FieldCondition[models.Product, sql.NullBool]{
		Expressions: exprs,
		Field:       "NullBool",
	}
}
func ProductByteArray(exprs ...badorm.Expression[[]uint8]) badorm.FieldCondition[models.Product, []uint8] {
	return badorm.FieldCondition[models.Product, []uint8]{
		Expressions: exprs,
		Field:       "ByteArray",
	}
}
func ProductMultiString(exprs ...badorm.Expression[models.MultiString]) badorm.FieldCondition[models.Product, models.MultiString] {
	return badorm.FieldCondition[models.Product, models.MultiString]{
		Expressions: exprs,
		Field:       "MultiString",
	}
}
func ProductEmbeddedInt(exprs ...badorm.Expression[int]) badorm.FieldCondition[models.Product, int] {
	return badorm.FieldCondition[models.Product, int]{
		Expressions: exprs,
		Field:       "EmbeddedInt",
	}
}
func ProductGormEmbeddedInt(exprs ...badorm.Expression[int]) badorm.FieldCondition[models.Product, int] {
	return badorm.FieldCondition[models.Product, int]{
		ColumnPrefix: "gorm_embedded_",
		Expressions:  exprs,
		Field:        "Int",
	}
}
