// Code generated by badctl v0.0.0, DO NOT EDIT.
package conditions

import (
	"database/sql"
	badorm "github.com/ditrit/badaas/badorm"
	models "github.com/ditrit/badaas/testintegration/models"
	gorm "gorm.io/gorm"
	"reflect"
	"time"
)

var productType = reflect.TypeOf(*new(models.Product))
var ProductIdField = badorm.FieldIdentifier[badorm.UUID]{
	Field:     "ID",
	ModelType: productType,
}

func ProductId(operator badorm.Operator[badorm.UUID]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, badorm.UUID]{
		FieldIdentifier: ProductIdField,
		Operator:        operator,
	}
}

var ProductCreatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: productType,
}

func ProductCreatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, time.Time]{
		FieldIdentifier: ProductCreatedAtField,
		Operator:        operator,
	}
}

var ProductUpdatedAtField = badorm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: productType,
}

func ProductUpdatedAt(operator badorm.Operator[time.Time]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, time.Time]{
		FieldIdentifier: ProductUpdatedAtField,
		Operator:        operator,
	}
}

var ProductDeletedAtField = badorm.FieldIdentifier[gorm.DeletedAt]{
	Field:     "DeletedAt",
	ModelType: productType,
}

func ProductDeletedAt(operator badorm.Operator[gorm.DeletedAt]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, gorm.DeletedAt]{
		FieldIdentifier: ProductDeletedAtField,
		Operator:        operator,
	}
}

var ProductStringField = badorm.FieldIdentifier[string]{
	Column:    "string_something_else",
	Field:     "String",
	ModelType: productType,
}

func ProductString(operator badorm.Operator[string]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, string]{
		FieldIdentifier: ProductStringField,
		Operator:        operator,
	}
}

var ProductIntField = badorm.FieldIdentifier[int]{
	Field:     "Int",
	ModelType: productType,
}

func ProductInt(operator badorm.Operator[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		FieldIdentifier: ProductIntField,
		Operator:        operator,
	}
}

var ProductIntPointerField = badorm.FieldIdentifier[int]{
	Field:     "IntPointer",
	ModelType: productType,
}

func ProductIntPointer(operator badorm.Operator[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		FieldIdentifier: ProductIntPointerField,
		Operator:        operator,
	}
}

var ProductFloatField = badorm.FieldIdentifier[float64]{
	Field:     "Float",
	ModelType: productType,
}

func ProductFloat(operator badorm.Operator[float64]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, float64]{
		FieldIdentifier: ProductFloatField,
		Operator:        operator,
	}
}

var ProductNullFloatField = badorm.FieldIdentifier[sql.NullFloat64]{
	Field:     "NullFloat",
	ModelType: productType,
}

func ProductNullFloat(operator badorm.Operator[sql.NullFloat64]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, sql.NullFloat64]{
		FieldIdentifier: ProductNullFloatField,
		Operator:        operator,
	}
}

var ProductBoolField = badorm.FieldIdentifier[bool]{
	Field:     "Bool",
	ModelType: productType,
}

func ProductBool(operator badorm.Operator[bool]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, bool]{
		FieldIdentifier: ProductBoolField,
		Operator:        operator,
	}
}

var ProductNullBoolField = badorm.FieldIdentifier[sql.NullBool]{
	Field:     "NullBool",
	ModelType: productType,
}

func ProductNullBool(operator badorm.Operator[sql.NullBool]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, sql.NullBool]{
		FieldIdentifier: ProductNullBoolField,
		Operator:        operator,
	}
}

var ProductByteArrayField = badorm.FieldIdentifier[[]uint8]{
	Field:     "ByteArray",
	ModelType: productType,
}

func ProductByteArray(operator badorm.Operator[[]uint8]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, []uint8]{
		FieldIdentifier: ProductByteArrayField,
		Operator:        operator,
	}
}

var ProductMultiStringField = badorm.FieldIdentifier[models.MultiString]{
	Field:     "MultiString",
	ModelType: productType,
}

func ProductMultiString(operator badorm.Operator[models.MultiString]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, models.MultiString]{
		FieldIdentifier: ProductMultiStringField,
		Operator:        operator,
	}
}

var ProductToBeEmbeddedEmbeddedIntField = badorm.FieldIdentifier[int]{
	Field:     "EmbeddedInt",
	ModelType: productType,
}

func ProductToBeEmbeddedEmbeddedInt(operator badorm.Operator[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		FieldIdentifier: ProductToBeEmbeddedEmbeddedIntField,
		Operator:        operator,
	}
}

var ProductGormEmbeddedIntField = badorm.FieldIdentifier[int]{
	ColumnPrefix: "gorm_embedded_",
	Field:        "Int",
	ModelType:    productType,
}

func ProductGormEmbeddedInt(operator badorm.Operator[int]) badorm.WhereCondition[models.Product] {
	return badorm.FieldCondition[models.Product, int]{
		FieldIdentifier: ProductGormEmbeddedIntField,
		Operator:        operator,
	}
}

var ProductPreloadAttributes = badorm.NewPreloadCondition[models.Product](ProductIdField, ProductCreatedAtField, ProductUpdatedAtField, ProductDeletedAtField, ProductStringField, ProductIntField, ProductIntPointerField, ProductFloatField, ProductNullFloatField, ProductBoolField, ProductNullBoolField, ProductByteArrayField, ProductMultiStringField, ProductToBeEmbeddedEmbeddedIntField, ProductGormEmbeddedIntField)
