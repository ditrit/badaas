// Creates a Entity of type "entityType" and its Values from the information provided in "attributeValues"
// not specified values are set with the default value (if exists) or a null value.
// entries in "attributeValues" that do not correspond to any attribute of "entityType" are ignored
//
// "attributeValues" are in {"attributeName": value} format
func (service *crudServiceImpl[T, ID]) CreateEntity(attributeValues map[string]any) (*T, error) {
	var entity T
	// TODO ver si dejo esto o desencodeo el json directo en la entidad
	// TODO testear lo de que se le pueden agregar relaciones a esto
	err := mapstructure.Decode(attributeValues, &entity)
	if err != nil {
		return nil, err // TODO ver que errores puede haber aca
	}

	err = service.repository.Create(service.db, &entity)
	if err != nil {
		return nil, err
	}

	// TODO eliminar esto
	// err := service.db.Model(&entity).Create(attributeValues).Error
	// if err != nil {
	// 	return nil, err
	// }
	// entity.ID = attributeValues["id"]

	return &entity, nil
}

// Updates entity with type "entityTypeName" and "id" Values to the new values provided in "newValues"
// entries in "newValues" that do not correspond to any attribute of the EntityType are ignored
//
// "newValues" are in {"attributeName": newValue} format
func (service *crudServiceImpl[T, ID]) UpdateEntity(entityID ID, newValues map[string]any) (*T, error) {
	// TODO
	return nil, nil
}

// Deletes Entity with type "entityTypeName" and id "entityID" and its values
func (service *crudServiceImpl[T, ID]) DeleteEntity(entityID ID) error {
	// TODO
	return nil
}

// ------------------------- CreateEntity --------------------------------

func (ts *CRUDServiceIntTestSuite) TestCreateEntityWithoutAttributes() {
	person, err := ts.crudPersonService.CreateEntity(map[string]any{})

	ts.Nil(err)
	ts.Equal("", person.Name)
}

func (ts *CRUDServiceIntTestSuite) TestCreateEntityWithOnlyOneAttribute() {
	person, err := ts.crudPersonService.CreateEntity(map[string]any{"Name": "franco"})

	ts.Nil(err)
	ts.Equal("franco", person.Name)
}

func (ts *CRUDServiceIntTestSuite) TestCreateEntityWithoutAOptionalRelation() {
	employee, err := ts.crudEmployeeService.CreateEntity(map[string]any{"Name": "franco"})

	ts.Nil(err)
	ts.Equal("franco", employee.Name)
}

func (ts *CRUDServiceIntTestSuite) TestCreateEntityWithAOptionalRelationWithID() {
	boss, err := ts.crudEmployeeService.CreateEntity(map[string]any{"Name": "xavier"})
	ts.Nil(err)

	employee, err := ts.crudEmployeeService.CreateEntity(
		map[string]any{"Name": "franco", "BossID": boss.ID.String()},
	)
	ts.Nil(err)
	ts.Equal("franco", employee.Name)
	ts.Equal(boss.ID, employee.BossID)
}