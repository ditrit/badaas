// The handler responsible of the creation of a object
func (controller *crudControllerImpl[T]) CreateObject(w http.ResponseWriter, r *http.Request) (any, httperrors.HTTPError) {
	attrs, herr := decodeJSONOptional(r)
	if herr != nil {
		return nil, herr
	}

	entity, err := controller.crudService.CreateEntity(attrs)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, ErrEntityTypeNotFound
		}
		return nil, httperrors.NewDBError(err)
	}

	// TODO add location header
	w.WriteHeader(http.StatusCreated)

	return entity, nil
}

// The handler responsible for the updates of one object
func (controller *crudControllerImpl[T]) UpdateObject(w http.ResponseWriter, r *http.Request) (any, httperrors.HTTPError) {
	entityID, herr := getEntityIDFromRequest(r)
	if herr != nil {
		return nil, herr
	}

	attrs, herr := decodeJSONOptional(r)
	if herr != nil {
		return nil, herr
	}

	entity, err := controller.crudService.UpdateEntity(entityID, attrs)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, ErrEntityNotFound
		}
		return nil, httperrors.NewDBError(err)
	}

	return entity, nil
}

// The handler responsible for the deletion of a object
func (controller *crudControllerImpl[T]) DeleteObject(w http.ResponseWriter, r *http.Request) (any, httperrors.HTTPError) {
	entityID, herr := getEntityIDFromRequest(r)
	if herr != nil {
		return nil, herr
	}

	err := controller.crudService.DeleteEntity(entityID)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, ErrEntityNotFound
		}
		return nil, httperrors.NewDBError(err)
	}

	return nil, nil
}