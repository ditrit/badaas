// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	badorm "github.com/ditrit/badaas/badorm"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// CRUDRepository is an autogenerated mock type for the CRUDRepository type
type CRUDRepository[T interface{}, ID badorm.BadaasID] struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, entity
func (_m *CRUDRepository[T, ID]) Create(tx *gorm.DB, entity *T) error {
	ret := _m.Called(tx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *T) error); ok {
		r0 = rf(tx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tx, entity
func (_m *CRUDRepository[T, ID]) Delete(tx *gorm.DB, entity *T) error {
	ret := _m.Called(tx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *T) error); ok {
		r0 = rf(tx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: tx, conditions
func (_m *CRUDRepository[T, ID]) Get(tx *gorm.DB, conditions map[string]interface{}) (*T, error) {
	ret := _m.Called(tx, conditions)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) (*T, error)); ok {
		return rf(tx, conditions)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) *T); ok {
		r0 = rf(tx, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, map[string]interface{}) error); ok {
		r1 = rf(tx, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: tx
func (_m *CRUDRepository[T, ID]) GetAll(tx *gorm.DB) ([]*T, error) {
	ret := _m.Called(tx)

	var r0 []*T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) ([]*T, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) []*T); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: tx, id
func (_m *CRUDRepository[T, ID]) GetByID(tx *gorm.DB, id ID) (*T, error) {
	ret := _m.Called(tx, id)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ID) (*T, error)); ok {
		return rf(tx, id)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ID) *T); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ID) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiple provides a mock function with given fields: tx, conditions
func (_m *CRUDRepository[T, ID]) GetMultiple(tx *gorm.DB, conditions map[string]interface{}) ([]*T, error) {
	ret := _m.Called(tx, conditions)

	var r0 []*T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) ([]*T, error)); ok {
		return rf(tx, conditions)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) []*T); ok {
		r0 = rf(tx, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, map[string]interface{}) error); ok {
		r1 = rf(tx, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOptional provides a mock function with given fields: tx, conditions
func (_m *CRUDRepository[T, ID]) GetOptional(tx *gorm.DB, conditions map[string]interface{}) (*T, error) {
	ret := _m.Called(tx, conditions)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) (*T, error)); ok {
		return rf(tx, conditions)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) *T); ok {
		r0 = rf(tx, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, map[string]interface{}) error); ok {
		r1 = rf(tx, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx, entity
func (_m *CRUDRepository[T, ID]) Save(tx *gorm.DB, entity *T) error {
	ret := _m.Called(tx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *T) error); ok {
		r0 = rf(tx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCRUDRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCRUDRepository creates a new instance of CRUDRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCRUDRepository[T interface{}, ID badorm.BadaasID](t mockConstructorTestingTNewCRUDRepository) *CRUDRepository[T, ID] {
	mock := &CRUDRepository[T, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
