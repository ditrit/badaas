// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	badorm "github.com/ditrit/badaas/badorm"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// CRUDRepository is an autogenerated mock type for the CRUDRepository type
type CRUDRepository[T badorm.Model, ID badorm.ModelID] struct {
	mock.Mock
}

// GetMultiple provides a mock function with given fields: tx, conditions
func (_m *CRUDRepository[T, ID]) GetMultiple(tx *gorm.DB, conditions map[string]interface{}) ([]*T, error) {
	ret := _m.Called(tx, conditions)

	var r0 []*T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) ([]*T, error)); ok {
		return rf(tx, conditions)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) []*T); ok {
		r0 = rf(tx, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, map[string]interface{}) error); ok {
		r1 = rf(tx, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCRUDRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCRUDRepository creates a new instance of CRUDRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCRUDRepository[T badorm.Model, ID badorm.ModelID](t mockConstructorTestingTNewCRUDRepository) *CRUDRepository[T, ID] {
	mock := &CRUDRepository[T, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
