// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/ditrit/badaas/persistence/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EAVService is an autogenerated mock type for the EAVService type
type EAVService struct {
	mock.Mock
}

// CreateEntity provides a mock function with given fields: ett, attrs
func (_m *EAVService) CreateEntity(ett *models.EntityType, attrs map[string]interface{}) (*models.Entity, error) {
	ret := _m.Called(ett, attrs)

	var r0 *models.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.EntityType, map[string]interface{}) (*models.Entity, error)); ok {
		return rf(ett, attrs)
	}
	if rf, ok := ret.Get(0).(func(*models.EntityType, map[string]interface{}) *models.Entity); ok {
		r0 = rf(ett, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.EntityType, map[string]interface{}) error); ok {
		r1 = rf(ett, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEntity provides a mock function with given fields: et
func (_m *EAVService) DeleteEntity(et *models.Entity) error {
	ret := _m.Called(et)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Entity) error); ok {
		r0 = rf(et)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntitiesWithParams provides a mock function with given fields: ett, params
func (_m *EAVService) GetEntitiesWithParams(ett *models.EntityType, params map[string]string) []*models.Entity {
	ret := _m.Called(ett, params)

	var r0 []*models.Entity
	if rf, ok := ret.Get(0).(func(*models.EntityType, map[string]string) []*models.Entity); ok {
		r0 = rf(ett, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Entity)
		}
	}

	return r0
}

// GetEntity provides a mock function with given fields: ett, id
func (_m *EAVService) GetEntity(ett *models.EntityType, id uuid.UUID) (*models.Entity, error) {
	ret := _m.Called(ett, id)

	var r0 *models.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.EntityType, uuid.UUID) (*models.Entity, error)); ok {
		return rf(ett, id)
	}
	if rf, ok := ret.Get(0).(func(*models.EntityType, uuid.UUID) *models.Entity); ok {
		r0 = rf(ett, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.EntityType, uuid.UUID) error); ok {
		r1 = rf(ett, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntityTypeByName provides a mock function with given fields: name
func (_m *EAVService) GetEntityTypeByName(name string) (*models.EntityType, error) {
	ret := _m.Called(name)

	var r0 *models.EntityType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.EntityType, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.EntityType); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EntityType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEntity provides a mock function with given fields: et, attrs
func (_m *EAVService) UpdateEntity(et *models.Entity, attrs map[string]interface{}) error {
	ret := _m.Called(et, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Entity, map[string]interface{}) error); ok {
		r0 = rf(et, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEAVService interface {
	mock.TestingT
	Cleanup(func())
}

// NewEAVService creates a new instance of EAVService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEAVService(t mockConstructorTestingTNewEAVService) *EAVService {
	mock := &EAVService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
